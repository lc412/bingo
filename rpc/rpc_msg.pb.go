// Code generated by protoc-gen-gogo.
// source: rpc/rpc_msg.proto
// DO NOT EDIT!

/*
	Package rpc is a generated protocol buffer package.

	It is generated from these files:
		rpc/rpc_msg.proto

	It has these top-level messages:
		MethodCall
		MethodReturn
*/
package rpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RPC_MSGID int32

const (
	RPC_MSGID_CALL   RPC_MSGID = -256
	RPC_MSGID_RETURN RPC_MSGID = -512
)

var RPC_MSGID_name = map[int32]string{
	-256: "CALL",
	-512: "RETURN",
}
var RPC_MSGID_value = map[string]int32{
	"CALL":   -256,
	"RETURN": -512,
}

func (x RPC_MSGID) Enum() *RPC_MSGID {
	p := new(RPC_MSGID)
	*p = x
	return p
}
func (x RPC_MSGID) String() string {
	return proto.EnumName(RPC_MSGID_name, int32(x))
}
func (x *RPC_MSGID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RPC_MSGID_value, data, "RPC_MSGID")
	if err != nil {
		return err
	}
	*x = RPC_MSGID(value)
	return nil
}
func (RPC_MSGID) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpcMsg, []int{0} }

type MethodCall struct {
	MethodName string `protobuf:"bytes,1,req,name=methodName" json:"methodName"`
	Args       []byte `protobuf:"bytes,2,opt,name=args" json:"args"`
	Version    string `protobuf:"bytes,3,opt,name=version" json:"version"`
}

func (m *MethodCall) Reset()                    { *m = MethodCall{} }
func (m *MethodCall) String() string            { return proto.CompactTextString(m) }
func (*MethodCall) ProtoMessage()               {}
func (*MethodCall) Descriptor() ([]byte, []int) { return fileDescriptorRpcMsg, []int{0} }

func (m *MethodCall) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *MethodCall) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *MethodCall) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type MethodReturn struct {
	Call   *MethodCall `protobuf:"bytes,1,req,name=call" json:"call,omitempty"`
	Result []byte      `protobuf:"bytes,2,opt,name=result" json:"result"`
}

func (m *MethodReturn) Reset()                    { *m = MethodReturn{} }
func (m *MethodReturn) String() string            { return proto.CompactTextString(m) }
func (*MethodReturn) ProtoMessage()               {}
func (*MethodReturn) Descriptor() ([]byte, []int) { return fileDescriptorRpcMsg, []int{1} }

func (m *MethodReturn) GetCall() *MethodCall {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *MethodReturn) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*MethodCall)(nil), "rpc.MethodCall")
	proto.RegisterType((*MethodReturn)(nil), "rpc.MethodReturn")
	proto.RegisterEnum("rpc.RPC_MSGID", RPC_MSGID_name, RPC_MSGID_value)
}
func (m *MethodCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MethodCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.MethodName)))
	i += copy(dAtA[i:], m.MethodName)
	if m.Args != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.Version)))
	i += copy(dAtA[i:], m.Version)
	return i, nil
}

func (m *MethodReturn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MethodReturn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Call == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("call")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpcMsg(dAtA, i, uint64(m.Call.Size()))
		n1, err := m.Call.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func encodeFixed64RpcMsg(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RpcMsg(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRpcMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MethodCall) Size() (n int) {
	var l int
	_ = l
	l = len(m.MethodName)
	n += 1 + l + sovRpcMsg(uint64(l))
	if m.Args != nil {
		l = len(m.Args)
		n += 1 + l + sovRpcMsg(uint64(l))
	}
	l = len(m.Version)
	n += 1 + l + sovRpcMsg(uint64(l))
	return n
}

func (m *MethodReturn) Size() (n int) {
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovRpcMsg(uint64(l))
	}
	if m.Result != nil {
		l = len(m.Result)
		n += 1 + l + sovRpcMsg(uint64(l))
	}
	return n
}

func sovRpcMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpcMsg(x uint64) (n int) {
	return sovRpcMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MethodCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MethodCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MethodCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args[:0], dAtA[iNdEx:postIndex]...)
			if m.Args == nil {
				m.Args = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("methodName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MethodReturn) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MethodReturn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MethodReturn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Call == nil {
				m.Call = &MethodCall{}
			}
			if err := m.Call.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("call")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpcMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpcMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpcMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpcMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpcMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpcMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc/rpc_msg.proto", fileDescriptorRpcMsg) }

var fileDescriptorRpcMsg = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2a, 0x48, 0xd6,
	0x2f, 0x2a, 0x48, 0x8e, 0xcf, 0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e,
	0x2a, 0x48, 0x56, 0x0a, 0xe4, 0xe2, 0xf2, 0x4d, 0x2d, 0xc9, 0xc8, 0x4f, 0x71, 0x4e, 0xcc, 0xc9,
	0x11, 0x92, 0xe0, 0xe2, 0xca, 0x05, 0xf3, 0xfc, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x98, 0x34,
	0x38, 0x9d, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x10, 0x12, 0xe2, 0x62, 0x49, 0x2c, 0x4a, 0x2f, 0x96,
	0x60, 0x52, 0x60, 0xd4, 0xe0, 0x81, 0x8a, 0x89, 0x72, 0xb1, 0x97, 0xa5, 0x16, 0x15, 0x67, 0xe6,
	0xe7, 0x49, 0x30, 0x2b, 0x30, 0xc2, 0x94, 0x2a, 0x39, 0x73, 0xf1, 0x40, 0x8c, 0x0c, 0x4a, 0x2d,
	0x29, 0x2d, 0xca, 0x13, 0x92, 0xe5, 0x62, 0x49, 0x4e, 0xcc, 0xc9, 0x01, 0x1b, 0xc7, 0x6d, 0xc4,
	0xaf, 0x57, 0x54, 0x90, 0xac, 0x87, 0x64, 0xa7, 0x08, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e,
	0x09, 0xb2, 0xd9, 0x5a, 0xc6, 0x5c, 0x9c, 0x41, 0x01, 0xce, 0xf1, 0xbe, 0xc1, 0xee, 0x9e, 0x2e,
	0x42, 0x82, 0x5c, 0x2c, 0xce, 0x8e, 0x3e, 0x3e, 0x02, 0x0d, 0xff, 0xfe, 0x43, 0x00, 0xa3, 0x90,
	0x30, 0x17, 0x5b, 0x90, 0x6b, 0x48, 0x68, 0x90, 0x9f, 0x40, 0xc3, 0x1f, 0x98, 0xa0, 0x93, 0xc0,
	0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c,
	0x03, 0x20, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xaf, 0x3e, 0x80, 0xf7, 0x00, 0x00, 0x00,
}
